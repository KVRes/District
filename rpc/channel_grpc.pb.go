// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: rpc/channel.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelService_Info_FullMethodName                      = "/ChannelService.ChannelService/Info"
	ChannelService_RegisterChannel_FullMethodName           = "/ChannelService.ChannelService/RegisterChannel"
	ChannelService_SendMessage_FullMethodName               = "/ChannelService.ChannelService/SendMessage"
	ChannelService_SendMessageOptimistic_FullMethodName     = "/ChannelService.ChannelService/SendMessageOptimistic"
	ChannelService_SendMessagePessimistic_FullMethodName    = "/ChannelService.ChannelService/SendMessagePessimistic"
	ChannelService_SendMessageStream_FullMethodName         = "/ChannelService.ChannelService/SendMessageStream"
	ChannelService_ReceiveMessage_FullMethodName            = "/ChannelService.ChannelService/ReceiveMessage"
	ChannelService_ReceiveMessageOptimistic_FullMethodName  = "/ChannelService.ChannelService/ReceiveMessageOptimistic"
	ChannelService_ReceiveMessagePessimistic_FullMethodName = "/ChannelService.ChannelService/ReceiveMessagePessimistic"
	ChannelService_ReceiveMessageStream_FullMethodName      = "/ChannelService.ChannelService/ReceiveMessageStream"
)

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServiceClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	RegisterChannel(ctx context.Context, in *RegisterChannelRequest, opts ...grpc.CallOption) (*RegisterChannelResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SendMessageOptimistic(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SendMessagePessimistic(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMessageResponse], error)
	SendMessageStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendMessageRequest, SendMessageResponse], error)
	ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveMessageResponse], error)
	ReceiveMessageOptimistic(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (*ReceiveMessageResponse, error)
	ReceiveMessagePessimistic(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveMessageResponse], error)
	ReceiveMessageStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReceiveMessageRequest, ReceiveMessageResponse], error)
}

type channelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServiceClient(cc grpc.ClientConnInterface) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, ChannelService_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) RegisterChannel(ctx context.Context, in *RegisterChannelRequest, opts ...grpc.CallOption) (*RegisterChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_RegisterChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChannelService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) SendMessageOptimistic(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChannelService_SendMessageOptimistic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) SendMessagePessimistic(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChannelService_ServiceDesc.Streams[0], ChannelService_SendMessagePessimistic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMessageRequest, SendMessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_SendMessagePessimisticClient = grpc.ServerStreamingClient[SendMessageResponse]

func (c *channelServiceClient) SendMessageStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendMessageRequest, SendMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChannelService_ServiceDesc.Streams[1], ChannelService_SendMessageStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMessageRequest, SendMessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_SendMessageStreamClient = grpc.BidiStreamingClient[SendMessageRequest, SendMessageResponse]

func (c *channelServiceClient) ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChannelService_ServiceDesc.Streams[2], ChannelService_ReceiveMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessageRequest, ReceiveMessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_ReceiveMessageClient = grpc.ServerStreamingClient[ReceiveMessageResponse]

func (c *channelServiceClient) ReceiveMessageOptimistic(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (*ReceiveMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveMessageResponse)
	err := c.cc.Invoke(ctx, ChannelService_ReceiveMessageOptimistic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) ReceiveMessagePessimistic(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChannelService_ServiceDesc.Streams[3], ChannelService_ReceiveMessagePessimistic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessageRequest, ReceiveMessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_ReceiveMessagePessimisticClient = grpc.ServerStreamingClient[ReceiveMessageResponse]

func (c *channelServiceClient) ReceiveMessageStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReceiveMessageRequest, ReceiveMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChannelService_ServiceDesc.Streams[4], ChannelService_ReceiveMessageStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessageRequest, ReceiveMessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_ReceiveMessageStreamClient = grpc.BidiStreamingClient[ReceiveMessageRequest, ReceiveMessageResponse]

// ChannelServiceServer is the server API for ChannelService service.
// All implementations must embed UnimplementedChannelServiceServer
// for forward compatibility.
type ChannelServiceServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	RegisterChannel(context.Context, *RegisterChannelRequest) (*RegisterChannelResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SendMessageOptimistic(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SendMessagePessimistic(*SendMessageRequest, grpc.ServerStreamingServer[SendMessageResponse]) error
	SendMessageStream(grpc.BidiStreamingServer[SendMessageRequest, SendMessageResponse]) error
	ReceiveMessage(*ReceiveMessageRequest, grpc.ServerStreamingServer[ReceiveMessageResponse]) error
	ReceiveMessageOptimistic(context.Context, *ReceiveMessageRequest) (*ReceiveMessageResponse, error)
	ReceiveMessagePessimistic(*ReceiveMessageRequest, grpc.ServerStreamingServer[ReceiveMessageResponse]) error
	ReceiveMessageStream(grpc.BidiStreamingServer[ReceiveMessageRequest, ReceiveMessageResponse]) error
	mustEmbedUnimplementedChannelServiceServer()
}

// UnimplementedChannelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelServiceServer struct{}

func (UnimplementedChannelServiceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedChannelServiceServer) RegisterChannel(context.Context, *RegisterChannelRequest) (*RegisterChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChannel not implemented")
}
func (UnimplementedChannelServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChannelServiceServer) SendMessageOptimistic(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageOptimistic not implemented")
}
func (UnimplementedChannelServiceServer) SendMessagePessimistic(*SendMessageRequest, grpc.ServerStreamingServer[SendMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessagePessimistic not implemented")
}
func (UnimplementedChannelServiceServer) SendMessageStream(grpc.BidiStreamingServer[SendMessageRequest, SendMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessageStream not implemented")
}
func (UnimplementedChannelServiceServer) ReceiveMessage(*ReceiveMessageRequest, grpc.ServerStreamingServer[ReceiveMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedChannelServiceServer) ReceiveMessageOptimistic(context.Context, *ReceiveMessageRequest) (*ReceiveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessageOptimistic not implemented")
}
func (UnimplementedChannelServiceServer) ReceiveMessagePessimistic(*ReceiveMessageRequest, grpc.ServerStreamingServer[ReceiveMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessagePessimistic not implemented")
}
func (UnimplementedChannelServiceServer) ReceiveMessageStream(grpc.BidiStreamingServer[ReceiveMessageRequest, ReceiveMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessageStream not implemented")
}
func (UnimplementedChannelServiceServer) mustEmbedUnimplementedChannelServiceServer() {}
func (UnimplementedChannelServiceServer) testEmbeddedByValue()                        {}

// UnsafeChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServiceServer will
// result in compilation errors.
type UnsafeChannelServiceServer interface {
	mustEmbedUnimplementedChannelServiceServer()
}

func RegisterChannelServiceServer(s grpc.ServiceRegistrar, srv ChannelServiceServer) {
	// If the following call pancis, it indicates UnimplementedChannelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelService_ServiceDesc, srv)
}

func _ChannelService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_RegisterChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).RegisterChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_RegisterChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).RegisterChannel(ctx, req.(*RegisterChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_SendMessageOptimistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).SendMessageOptimistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_SendMessageOptimistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).SendMessageOptimistic(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_SendMessagePessimistic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServiceServer).SendMessagePessimistic(m, &grpc.GenericServerStream[SendMessageRequest, SendMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_SendMessagePessimisticServer = grpc.ServerStreamingServer[SendMessageResponse]

func _ChannelService_SendMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelServiceServer).SendMessageStream(&grpc.GenericServerStream[SendMessageRequest, SendMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_SendMessageStreamServer = grpc.BidiStreamingServer[SendMessageRequest, SendMessageResponse]

func _ChannelService_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServiceServer).ReceiveMessage(m, &grpc.GenericServerStream[ReceiveMessageRequest, ReceiveMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_ReceiveMessageServer = grpc.ServerStreamingServer[ReceiveMessageResponse]

func _ChannelService_ReceiveMessageOptimistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).ReceiveMessageOptimistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_ReceiveMessageOptimistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).ReceiveMessageOptimistic(ctx, req.(*ReceiveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_ReceiveMessagePessimistic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServiceServer).ReceiveMessagePessimistic(m, &grpc.GenericServerStream[ReceiveMessageRequest, ReceiveMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_ReceiveMessagePessimisticServer = grpc.ServerStreamingServer[ReceiveMessageResponse]

func _ChannelService_ReceiveMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelServiceServer).ReceiveMessageStream(&grpc.GenericServerStream[ReceiveMessageRequest, ReceiveMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelService_ReceiveMessageStreamServer = grpc.BidiStreamingServer[ReceiveMessageRequest, ReceiveMessageResponse]

// ChannelService_ServiceDesc is the grpc.ServiceDesc for ChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChannelService.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ChannelService_Info_Handler,
		},
		{
			MethodName: "RegisterChannel",
			Handler:    _ChannelService_RegisterChannel_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChannelService_SendMessage_Handler,
		},
		{
			MethodName: "SendMessageOptimistic",
			Handler:    _ChannelService_SendMessageOptimistic_Handler,
		},
		{
			MethodName: "ReceiveMessageOptimistic",
			Handler:    _ChannelService_ReceiveMessageOptimistic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessagePessimistic",
			Handler:       _ChannelService_SendMessagePessimistic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessageStream",
			Handler:       _ChannelService_SendMessageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveMessage",
			Handler:       _ChannelService_ReceiveMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveMessagePessimistic",
			Handler:       _ChannelService_ReceiveMessagePessimistic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveMessageStream",
			Handler:       _ChannelService_ReceiveMessageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/channel.proto",
}
